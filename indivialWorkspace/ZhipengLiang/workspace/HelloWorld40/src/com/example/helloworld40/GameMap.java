package com.example.helloworld40;

import java.io.InputStream;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;

public class GameMap {


	//横向纵向tile块的数量
	int mWidthTileCount = 0;
	int mHeightTileCount = 0;

	//横向纵向tile块的数量
	int mBitMapWidth = 0;
	int mBitMapHeight = 0;
    //tile块的宽高
public final static int TILE_WIDTH = 40;//32
public final static int TILE_HEIGHT = 40;//32

    //tile块的宽高的数量
public final static int TILE_WIDTH_COUNT = 32;//10;//32
public final static int TILE_HEIGHT_COUNT = 18;//15;//18

//数组元素为0则什么都不画
public final static int TILE_NULL = 0;
//第一层游戏View地图数组
//从游戏画面来是路
public int [][]mMapRoadLayer1 = {
		{	0,45,34,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,0,	},
		{	0,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,0,	},
		{	0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,0,	},
		{	0,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,34,34,34,34,34,34,34,34,45,34,0,	},
		{	0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,34,34,34,34,34,34,45,34,45,0,	},
		{	0,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,0,	},
		{	0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,0,	},
		{	0,45,34,45,34,45,34,45,34,45,34,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,45,34,0,	},
		{	0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,0,	},
		{	0,45,34,45,0,0,0,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,0,	},
		{	0,34,45,34,0,0,0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,34,34,34,34,45,34,45,0,	},
		{	0,45,34,45,0,0,0,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,0,	},
		{	0,34,45,34,0,0,0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,34,34,34,34,45,34,45,34,45,0,	},
		{	0,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,34,34,34,34,45,34,45,34,0,	},
		{	0,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,0,	},
		{	0,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,45,34,0,	},
		{	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	}

	};

//第二层游戏实体actor数组,也用于碰撞
public int [][]mMapObjLayer2  = {
		{	26,4,4,4,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,54,	},
		{	26,15,15,15,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,10,10,10,0,0,0,0,13,49,13,49,13,49,13,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,10,10,10,0,0,0,0,16,13,16,13,16,13,16,0,0,0,10,10,10,10,10,10,10,0,0,0,23,	},
		{	26,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,0,0,0,23,	},
		{	26,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,0,0,0,0,0,0,10,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,23,	},
		{	26,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,13,13,13,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,35,36,37,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,0,0,0,0,23,	},
		{	26,0,0,0,46,47,48,0,0,0,10,10,0,0,0,0,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,13,13,13,0,0,0,10,10,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,0,0,0,0,0,0,10,10,0,0,0,10,10,0,0,0,0,0,55,55,55,55,0,0,0,0,0,23,	},
		{	26,0,0,0,0,0,0,0,0,0,10,10,0,0,0,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	26,0,0,0,0,0,0,0,0,0,12,12,0,0,0,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,23,	},
		{	32,36,36,36,36,36,36,36,36,36,36,37,15,15,15,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,21	}

	};

//第三层,修饰的花边
public int [][]mMapExtraLayer3  = {
		{	0,6,6,7,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,27,0,27,0,7,0,0,0,6,6,2,38,2,38,2,38,2,0,0,0,6,6,6,6,6,6,6,0,0,0,0,	},
		{	0,0,27,27,0,7,0,27,0,0,0,5,2,5,2,5,2,5,0,0,0,1,1,1,1,1,1,1,6,0,0,0,	},
		{	0,27,27,27,0,7,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,	},
		{	0,27,27,27,0,7,0,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,27,27,27,0,0,27,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,27,27,27,0,27,27,27,27,27,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,	},
		{	0,27,27,27,0,27,27,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,27,27,27,2,2,2,27,27,27,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,27,27,27,0,0,0,27,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,	},
		{	0,27,27,27,0,0,0,27,27,27,0,0,0,0,0,0,11,11,11,11,0,0,0,7,7,7,7,0,0,0,0,0,	},
		{	0,27,27,27,2,2,2,27,0,27,0,0,0,0,0,1,6,6,6,6,6,6,6,7,0,0,0,0,0,0,0,0,	},
		{	0,27,27,0,0,0,0,27,27,27,0,0,0,0,0,0,1,7,7,6,6,6,44,44,44,44,6,0,0,0,0,0,	},
		{	0,27,27,27,27,27,0,27,27,27,0,0,0,0,0,1,1,1,0,0,0,0,6,0,0,0,0,0,0,0,0,0,	},
		{	0,27,27,27,27,27,27,27,27,27,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,27,27,27,0,27,27,27,27,27,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,	},
		{	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	}

	};
/*
//游戏碰撞物理层数组
public int [][]mCollisionLayer0  = {
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	};
*/

//游戏地图资源
Bitmap mBitmap = null;


//原initMap(Context context)方法
public GameMap(Context context) {
	 mBitmap = ReadBitMap(context, R.drawable.map);
	    mBitMapWidth = mBitmap.getWidth();
	    mBitMapHeight = mBitmap.getHeight();
	    mWidthTileCount = mBitMapWidth / TILE_WIDTH;
	    mHeightTileCount = mBitMapHeight / TILE_HEIGHT;
}

/**
 * 读取本地资源的图片
 * 
 * @param context
 * @param resId
 * @return
 */
public Bitmap ReadBitMap(Context context, int resId) {
    BitmapFactory.Options opt = new BitmapFactory.Options();
    opt.inPreferredConfig = Bitmap.Config.RGB_565;
    opt.inPurgeable = true;
    opt.inInputShareable = true;
    // 获取资源图片
    InputStream is = context.getResources().openRawResource(resId);
    return BitmapFactory.decodeStream(is, null, opt);
}

//画地图
	public void drawMap(Canvas canvas, Paint paint) {
		int i, j;
		for (i = 0; i < TILE_HEIGHT_COUNT; i++) {
			for (j = 0; j < TILE_WIDTH_COUNT; j++) {
				int roadId = mMapRoadLayer1[i][j];
				int objId = mMapObjLayer2[i][j];
				int extId = this.mMapExtraLayer3[i][j];
				// 绘制地图第一层
				if (roadId > TILE_NULL) {
					DrawMapTile(roadId, canvas, paint, mBitmap, j * TILE_WIDTH, i * TILE_HEIGHT);
				}

				// 绘制地图第二层
				if (objId > TILE_NULL) {
					DrawMapTile(objId, canvas, paint, mBitmap, j * TILE_WIDTH, i * TILE_HEIGHT);
				}
				// 绘制地图第3层
				if (extId > TILE_NULL) {
					DrawMapTile(extId, canvas, paint, mBitmap, j * TILE_WIDTH, i * TILE_HEIGHT);
				}
			}
		}
	}
/**
 * 根据ID绘制一个tile块
 * @param id
 * @param canvas
 * @param paint
 * @param bitmap
 */
private void DrawMapTile(int id,Canvas canvas,Paint paint ,Bitmap bitmap,int x, int y) {
    //根据数组中的ID算出在地图资源中的XY 坐标
    //因为编辑器默认0 所以第一张tile的ID不是0而是1 所以这里 -1
    id--;
    int count = id /mWidthTileCount;
    int bitmapX = (id - (count * mWidthTileCount)) * TILE_WIDTH;
    int bitmapY = count * TILE_HEIGHT;
    DrawClipImage(canvas,paint,bitmap,x,y,bitmapX,bitmapY,TILE_WIDTH,TILE_HEIGHT);
}

	/**
	 * 绘制图片中的一部分图片
	 * 
	 * @param canvas
	 * @param paint
	 * @param bitmap
	 * @param xOnCanvas
	 * @param yOnCanvas
	 * @param xOntile
	 * @param yOntile
	 * @param tileWidth
	 * @param tileHigh
	 */
	private void DrawClipImage(Canvas canvas, Paint paint, Bitmap bitmap,
			int xOnCanvas, int yOnCanvas, int xOntile, int yOntile, int tileWidth,	int tileHigh) {
		canvas.save();
		canvas.clipRect(xOnCanvas, yOnCanvas, xOnCanvas + tileWidth, yOnCanvas+ tileHigh);
		canvas.drawBitmap(bitmap, xOnCanvas - xOntile, yOnCanvas - yOntile, paint);
		canvas.restore();
	}
}
